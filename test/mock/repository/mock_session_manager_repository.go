// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/session_manager_repository.go

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	echo "github.com/labstack/echo/v4"
	jwk "github.com/lestrrat-go/jwx/jwk"
	dto "github.com/ucho456job/lgtmeme/internal/dto"
	repository "github.com/ucho456job/lgtmeme/internal/repository"
)

// MockSessionManagerRepository is a mock of SessionManagerRepository interface.
type MockSessionManagerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerRepositoryMockRecorder
}

// MockSessionManagerRepositoryMockRecorder is the mock recorder for MockSessionManagerRepository.
type MockSessionManagerRepositoryMockRecorder struct {
	mock *MockSessionManagerRepository
}

// NewMockSessionManagerRepository creates a new mock instance.
func NewMockSessionManagerRepository(ctrl *gomock.Controller) *MockSessionManagerRepository {
	mock := &MockSessionManagerRepository{ctrl: ctrl}
	mock.recorder = &MockSessionManagerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManagerRepository) EXPECT() *MockSessionManagerRepositoryMockRecorder {
	return m.recorder
}

// CacheAuthzCodeCtx mocks base method.
func (m *MockSessionManagerRepository) CacheAuthzCodeCtx(c echo.Context, q dto.AuthzQuery, authzCode string, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheAuthzCodeCtx", c, q, authzCode, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheAuthzCodeCtx indicates an expected call of CacheAuthzCodeCtx.
func (mr *MockSessionManagerRepositoryMockRecorder) CacheAuthzCodeCtx(c, q, authzCode, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheAuthzCodeCtx", reflect.TypeOf((*MockSessionManagerRepository)(nil).CacheAuthzCodeCtx), c, q, authzCode, userID)
}

// CacheGeneralAccessToken mocks base method.
func (m *MockSessionManagerRepository) CacheGeneralAccessToken(c echo.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheGeneralAccessToken", c, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheGeneralAccessToken indicates an expected call of CacheGeneralAccessToken.
func (mr *MockSessionManagerRepositoryMockRecorder) CacheGeneralAccessToken(c, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheGeneralAccessToken", reflect.TypeOf((*MockSessionManagerRepository)(nil).CacheGeneralAccessToken), c, token)
}

// CacheLoginSession mocks base method.
func (m *MockSessionManagerRepository) CacheLoginSession(c echo.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLoginSession", c, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheLoginSession indicates an expected call of CacheLoginSession.
func (mr *MockSessionManagerRepositoryMockRecorder) CacheLoginSession(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLoginSession", reflect.TypeOf((*MockSessionManagerRepository)(nil).CacheLoginSession), c, userID)
}

// CachePreAuthnSession mocks base method.
func (m *MockSessionManagerRepository) CachePreAuthnSession(c echo.Context, q dto.AuthzQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachePreAuthnSession", c, q)
	ret0, _ := ret[0].(error)
	return ret0
}

// CachePreAuthnSession indicates an expected call of CachePreAuthnSession.
func (mr *MockSessionManagerRepositoryMockRecorder) CachePreAuthnSession(c, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachePreAuthnSession", reflect.TypeOf((*MockSessionManagerRepository)(nil).CachePreAuthnSession), c, q)
}

// CachePublicKey mocks base method.
func (m *MockSessionManagerRepository) CachePublicKey(c echo.Context, keySet jwk.Set) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachePublicKey", c, keySet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CachePublicKey indicates an expected call of CachePublicKey.
func (mr *MockSessionManagerRepositoryMockRecorder) CachePublicKey(c, keySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachePublicKey", reflect.TypeOf((*MockSessionManagerRepository)(nil).CachePublicKey), c, keySet)
}

// CacheStateAndNonce mocks base method.
func (m *MockSessionManagerRepository) CacheStateAndNonce(c echo.Context, state, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheStateAndNonce", c, state, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheStateAndNonce indicates an expected call of CacheStateAndNonce.
func (mr *MockSessionManagerRepositoryMockRecorder) CacheStateAndNonce(c, state, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheStateAndNonce", reflect.TypeOf((*MockSessionManagerRepository)(nil).CacheStateAndNonce), c, state, nonce)
}

// CacheToken mocks base method.
func (m *MockSessionManagerRepository) CacheToken(c echo.Context, token, sessionName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheToken", c, token, sessionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheToken indicates an expected call of CacheToken.
func (mr *MockSessionManagerRepositoryMockRecorder) CacheToken(c, token, sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheToken", reflect.TypeOf((*MockSessionManagerRepository)(nil).CacheToken), c, token, sessionName)
}

// CheckRedis mocks base method.
func (m *MockSessionManagerRepository) CheckRedis(c echo.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRedis", c, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRedis indicates an expected call of CheckRedis.
func (mr *MockSessionManagerRepositoryMockRecorder) CheckRedis(c, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRedis", reflect.TypeOf((*MockSessionManagerRepository)(nil).CheckRedis), c, key)
}

// LoadAuthzCodeCtx mocks base method.
func (m *MockSessionManagerRepository) LoadAuthzCodeCtx(c echo.Context, code string) (*repository.AuthzCodeCtx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAuthzCodeCtx", c, code)
	ret0, _ := ret[0].(*repository.AuthzCodeCtx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAuthzCodeCtx indicates an expected call of LoadAuthzCodeCtx.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadAuthzCodeCtx(c, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAuthzCodeCtx", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadAuthzCodeCtx), c, code)
}

// LoadGeneralAccessToken mocks base method.
func (m *MockSessionManagerRepository) LoadGeneralAccessToken(c echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGeneralAccessToken", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadGeneralAccessToken indicates an expected call of LoadGeneralAccessToken.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadGeneralAccessToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGeneralAccessToken", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadGeneralAccessToken), c)
}

// LoadLoginSession mocks base method.
func (m *MockSessionManagerRepository) LoadLoginSession(c echo.Context) (uuid.UUID, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLoginSession", c)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadLoginSession indicates an expected call of LoadLoginSession.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadLoginSession(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLoginSession", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadLoginSession), c)
}

// LoadPreAuthnSession mocks base method.
func (m *MockSessionManagerRepository) LoadPreAuthnSession(c echo.Context) (*dto.AuthzQuery, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPreAuthnSession", c)
	ret0, _ := ret[0].(*dto.AuthzQuery)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadPreAuthnSession indicates an expected call of LoadPreAuthnSession.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadPreAuthnSession(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPreAuthnSession", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadPreAuthnSession), c)
}

// LoadPublicKey mocks base method.
func (m *MockSessionManagerRepository) LoadPublicKey(c echo.Context) (jwk.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPublicKey", c)
	ret0, _ := ret[0].(jwk.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPublicKey indicates an expected call of LoadPublicKey.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadPublicKey(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPublicKey", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadPublicKey), c)
}

// LoadStateAndNonce mocks base method.
func (m *MockSessionManagerRepository) LoadStateAndNonce(c echo.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStateAndNonce", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadStateAndNonce indicates an expected call of LoadStateAndNonce.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadStateAndNonce(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStateAndNonce", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadStateAndNonce), c)
}

// LoadToken mocks base method.
func (m *MockSessionManagerRepository) LoadToken(c echo.Context, sessionName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadToken", c, sessionName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadToken indicates an expected call of LoadToken.
func (mr *MockSessionManagerRepositoryMockRecorder) LoadToken(c, sessionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadToken", reflect.TypeOf((*MockSessionManagerRepository)(nil).LoadToken), c, sessionName)
}

// Logout mocks base method.
func (m *MockSessionManagerRepository) Logout(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockSessionManagerRepositoryMockRecorder) Logout(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionManagerRepository)(nil).Logout), c)
}
