// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/refresh_token_repository.go

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	echo "github.com/labstack/echo/v4"
	model "github.com/ucho456job/lgtmeme/internal/model"
)

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRefreshTokenRepository) Create(c echo.Context, userID, clientID uuid.UUID, token, scope string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, userID, clientID, token, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRefreshTokenRepositoryMockRecorder) Create(c, userID, clientID, token, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRefreshTokenRepository)(nil).Create), c, userID, clientID, token, scope)
}

// FindByToken mocks base method.
func (m *MockRefreshTokenRepository) FindByToken(c echo.Context, token string) (model.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", c, token)
	ret0, _ := ret[0].(model.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByToken(c, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByToken), c, token)
}

// Update mocks base method.
func (m *MockRefreshTokenRepository) Update(c echo.Context, userID, clientID uuid.UUID, newToken, scope string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, userID, clientID, newToken, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRefreshTokenRepositoryMockRecorder) Update(c, userID, clientID, newToken, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRefreshTokenRepository)(nil).Update), c, userID, clientID, newToken, scope)
}
