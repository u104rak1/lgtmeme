// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/oauth_client_repository.go

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	echo "github.com/labstack/echo/v4"
	dto "github.com/ucho456job/lgtmeme/internal/dto"
	model "github.com/ucho456job/lgtmeme/internal/model"
)

// MockOauthClientRepository is a mock of OauthClientRepository interface.
type MockOauthClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOauthClientRepositoryMockRecorder
}

// MockOauthClientRepositoryMockRecorder is the mock recorder for MockOauthClientRepository.
type MockOauthClientRepositoryMockRecorder struct {
	mock *MockOauthClientRepository
}

// NewMockOauthClientRepository creates a new mock instance.
func NewMockOauthClientRepository(ctrl *gomock.Controller) *MockOauthClientRepository {
	mock := &MockOauthClientRepository{ctrl: ctrl}
	mock.recorder = &MockOauthClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthClientRepository) EXPECT() *MockOauthClientRepositoryMockRecorder {
	return m.recorder
}

// ExistsForAuthz mocks base method.
func (m *MockOauthClientRepository) ExistsForAuthz(c echo.Context, q dto.AuthzQuery) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsForAuthz", c, q)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsForAuthz indicates an expected call of ExistsForAuthz.
func (mr *MockOauthClientRepositoryMockRecorder) ExistsForAuthz(c, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsForAuthz", reflect.TypeOf((*MockOauthClientRepository)(nil).ExistsForAuthz), c, q)
}

// FindByClientID mocks base method.
func (m *MockOauthClientRepository) FindByClientID(c echo.Context, clientID uuid.UUID) (*model.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByClientID", c, clientID)
	ret0, _ := ret[0].(*model.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByClientID indicates an expected call of FindByClientID.
func (mr *MockOauthClientRepositoryMockRecorder) FindByClientID(c, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByClientID", reflect.TypeOf((*MockOauthClientRepository)(nil).FindByClientID), c, clientID)
}
