// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/health_repository.go

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockHealthRepository is a mock of HealthRepository interface.
type MockHealthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthRepositoryMockRecorder
}

// MockHealthRepositoryMockRecorder is the mock recorder for MockHealthRepository.
type MockHealthRepositoryMockRecorder struct {
	mock *MockHealthRepository
}

// NewMockHealthRepository creates a new mock instance.
func NewMockHealthRepository(ctrl *gomock.Controller) *MockHealthRepository {
	mock := &MockHealthRepository{ctrl: ctrl}
	mock.recorder = &MockHealthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthRepository) EXPECT() *MockHealthRepositoryMockRecorder {
	return m.recorder
}

// CheckPostgres mocks base method.
func (m *MockHealthRepository) CheckPostgres(c echo.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPostgres", c, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPostgres indicates an expected call of CheckPostgres.
func (mr *MockHealthRepositoryMockRecorder) CheckPostgres(c, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPostgres", reflect.TypeOf((*MockHealthRepository)(nil).CheckPostgres), c, key)
}
